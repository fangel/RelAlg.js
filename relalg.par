/~
A Relational Algebra parser. Returns a tree of Tree-subinstances
~/

/~ Whitespace tokens ~/
!	' |\r|\n|\t'
	;

/~ Left associate tokens, normal precedence ~/
<	'\|\|'
	;

/~ Left associative tokens, high precedence ~/
<	'&&'
	;

/~ Other tokens ~/
	'Project'
	'Rename'
	'Select'
	'Union'
	'Intersect'
	'-'
	'X'
	'Join'
	'\/'
	'->'
	','
	'==|!=|<=|>=|<|>'				Comparison
	'\('
	'\)'
	'\['
	'\]'
	'[A-Za-z_][A-Za-z0-9_]*'		Identifier
	'\'([^\']|\'\')*\''				String							[* %match = %match.substr( 1, %match.length - 2 );
																   	   %match = %match.replace( /''/g, "\'" );		*]
	'[0-9]+'						Integer							[* %match = parseInt(%match); *]
	'[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'	Float							[* %match = parseFloat(%match); *]
	;

##

/~ Grammar ~/
Algebra:		Stmt												[* algebra = %1; *]
				;

Stmt:			Identifier											[* %% = new Tree.Relation( %1 ); *]
				| Stmt 'Union' Stmt									[* %% = new Tree.Union( %1, %3 ); *]
				| Stmt 'Intersect' Stmt								[* %% = new Tree.Intersection( %1, %3 ); *]
				| Stmt '-' Stmt										[* %% = new Tree.Difference( %1, %3 ); *]
				| Stmt 'X' Stmt										[* %% = new Tree.Cartesian( %1, %3 ); *]
				| Stmt 'Join' '[' Criteria ']' Stmt					[* %% = new Tree.Join( %1, %4, %6 ); *]
				| Stmt 'Join' Stmt									[* %% = new Tree.NaturalJoin( %1, %3 ); *]
				| Stmt '/' Stmt										[* %% = new Tree.Division( %1, %3 ); *]
				| '(' Stmt ')'										[* %% = %2 *]
				| 'Project' '[' ProjectionList ']' '(' Stmt ')' 	[* %% = new Tree.Projection( %3, %6 ); *]
				| 'Rename' '[' RenameList ']' '(' Stmt ')'			[* %% = new Tree.Rename( %3, %6 ); *]
				| 'Select' '[' Criteria ']' '(' Stmt ')'			[* %% = new Tree.Selection( %3, %6 ); *]
				;

ProjectionList: Identifier											[* %% = new Tree.ProjectionList( %1 ); *]
				| ProjectionList ',' Identifier						[* %% = %1.add(%3); *]
				;
				
RenameList:		Identifier '->' Identifier							[* %% = new Tree.RenameList( [%1, %3] ); *]
				| Integer '->' Identifier							[* %% = new Tree.RenameList( [%1, %3] ); *]
				| RenameList ',' Identifier '->' Identifier			[* %% = %1.add( [%3, %5] ); *]
				| RenameList ',' Integer '->' Identifier			[* %% = %1.add( [%3, %5] ); *]
				;
				
Criteria:		Value Comparison Value								[* %% = new Tree.Criteria(%1, %2, %3); *]
				| Criteria '&&' Criteria							[* %% = new Tree.CriteriaComposition(%1, 'AND', %3); *]
				| Criteria '||' Criteria							[* %% = new Tree.CriteriaComposition(%1, 'OR', %3); *]
				| '(' Criteria ')'									[* %% = %2; *]
				;
				
Value:			Identifier											[* %% = new Tree.Attribute( %1 ); *]
				| String											[* %% = new Tree.Value( %1 ); *]
				| Integer											[* %% = new Tree.Value( %1 ); *]
				| Float												[* %% = new Tree.Value( %1 ); *]
				;

/~ Parser instructions ~/
[*
var error_offsets = new Array();
var error_lookaheads = new Array();
var error_count = 0;

function RAParseError( input, errors ) {
	this.input = input;
	this.errors = errors;
}
RAParseError.prototype.input = '';
RAParseError.prototype.errors = [];
RAParseError.prototype.toString = function() {
	var error = '';
	for( var i in this.errors ) {
		error += "Parse error: Unexpected '" + this.errors[i].token + "', expecting one of '" + this.errors[i].lookahead.join("', '") + "'\n";
		if( this.errors[i].offset ) {
			error += this.input + "\n";
			error += (new Array(this.errors[i].offset+1).join('-')) + new Array(this.errors[i].token.length+1).join('^') + "\n\n";
		}
	}
	return error.substr(0, error.length-2);
}

function parser( input ) {
	algebra = null;
	
	error_count = __##PREFIX##parse( input, error_offsets, error_lookaheads );
	if( error_count > 0 ) {
		var errors = [];
		var regexp = /^(->|\(|\)|\[|\]|&&|\|\||\/|[a-z]+|\'([^\']|\'\')*\'|[0-9]+(\.[0-9]+)?)/i
		for( var i = 0; i < error_count; i++ ) {
			var likelyToken = input.substring( error_offsets[i]).match( regexp )[0];
			errors.push({token: likelyToken, offset: error_offsets[i], lookahead: error_lookaheads[i]});
		}
		throw new RAParseError(input, errors);
  	}
  
	return algebra;
}

*]
